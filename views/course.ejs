<!DOCTYPE html>
<html>

<head>
    <title>Realtime communication with WebRTC</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
    <link rel="stylesheet" href="../../css/dash.css">
    <link rel="stylesheet" href="../../css/conference.css">

    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <script src="../../web3/web3.js"></script>
</head>

<body>
    <div class="navbar-fixed">
        <nav class="nav-natanedu">
            <div class="nav-wrapper">
                <a href="#" class="brand-logo">

                    <img src="../../img/logo.png" class="size-35 logo-nav" />
                    <span id="timer" class="center counter"></span>
                </a>

                <ul id="nav-mobile" class="right hide-on-med-and-down">
                    <li>
                        <a id="filesend" onclick="openfile()" class="waves-effect waves-light btn-flat white-text "
                            href="#!">
                            <i class="material-icons">
                                attach_file
                            </i>
                            <input type="file" class="hide" id="file" accept="application/msword, application/vnd.ms-powerpoint,
                            text/plain, application/pdf, image/jpeg,image/png" />
                        </a>
                    </li>
                    <li>
                        <a id="videocontrol" class="waves-effect waves-light btn-flat white-text " href="#!">
                            <i class="material-icons">
                                videocam
                            </i>
                        </a>
                    </li>
                    <li>
                        <a id="backtodash" class="waves-effect waves-light btn-flat red-text lighten-1-text" href="/<%=type %>/dashboard">
                            <i class="material-icons">
                                call_end
                            </i>
                        </a>
                    </li>

                </ul>
            </div>

        </nav>

    </div>
    <ul id="videos" class="sidenav sidenav-fixed text-zone chat-sidebar">
        <li>
            <div class="row ">
                <div class="col s6">
                    <div id="remoteVideo" class="remote">

                    </div>
                </div>
                <div class="col s6">
                    <div id="localVideo" class="local">

                    </div>
                </div>
            </div>



        </li>
        <li class="mesage-container">
            <ul class="collection message-box" id="chatbox">



            </ul>
            <div class="row no-margin message-send">
                <div class="input-field col s10 no-margin">
                    <input placeholder="Text message" id="msg" type="text" class="validate">
                    <label for="msg">Text message</label>
                </div>
                <div class="input-field col s2 no-margin">
                    <button onclick="send()" class="btn waves-effect waves-light btn-flat"><i class="material-icons">send</i></button>
                </div>
            </div>
        </li>


    </ul>
    <div class="container" id="chat">

    </div>
    <div class="container" id="main">
        <div class="row">

            <div class="grey-text lighten-3-text hide" style="margin-top:15%;text-align:center;" id="stream-end">
                <span class="material-icons" style="font-size:38px">
                    cast</span><br />
                <span id="stream_info"></span><br />
                <a href="/<%=type %>/dashboard" class="waves-effect waves-light btn">close</a>
            </div>
        </div>
    </div>

    <div id="filecontainer" class="hide">

    </div>

    <!-- This file is automatically added/served when running "node index.js". -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
    <script src="https://rtcmulticonnection.herokuapp.com/dist/RTCMultiConnection.min.js"></script>
    <!--<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js"></script>-->
    <script src="https://rtcmulticonnection.herokuapp.com/socket.io/socket.io.js"></script>
    <script src="https://cdn.webrtc-experiment.com/FileBufferReader.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/downloadjs/1.4.8/download.js"></script>
    <script>
        var elems = document.getElementById('videos');
        var instances = M.Sidenav.init(elems, { edge: "right", draggable: true });
        instances.close();
        function Interval(fn, time) {
            var timer = false;
            this.start = function () {
                if (!this.isRunning())
                    timer = setInterval(fn, time);
            };
            this.startTimeout = function () {
                timer = setTimeout(fn, time);
            };
            this.stop = function () {
                clearInterval(timer);
                timer = false;
            };
            this.stopTimeout = function () {
                clearTimeout(timer);
                timer = false;
            };
            this.isRunning = function () {
                return timer !== false;
            };
        }
    </script>
    <%if(type=='student'){ %>
    <script src="../../student/student.js"></script>
    <script src="../lecture/lecture.js"></script>

    <script>
        var wallet = "<%=teacher %>";
        var lectureid = "<%=lecture%>";
        var price = "<%= price %>";
        function payMoney() {
            web3.eth.getAccounts(function (err, res) {
                if (res[0] != undefined) {
                    _student = res[0];
                    payLecture(
                        lectureid,
                        price,
                        student,
                        wallet,
                        { value: price }
                    );
                }
            });

            clearTimeout(timer);
        }
        var setpayed = new Interval(payMoney, 3 * 60 * 1000);



    </script>
    <% }else{  %>

    <script src="../../teacher/teacher.js"></script>
    <script>

        var name, last_name;
        // Set the date we're counting down to
        var _now = new Date();

        console.log(_now);
        var new_min = _now.getMinutes() + 3
        console.log(new_min);
        _now.setMinutes(new_min);
        var countDownDate = _now.getTime();





        function caluclate() {
            // Get todays date and time
            var now = new Date().getTime();

            // Find the distance between now and the count down date
            var distance = countDownDate - now;

            // Time calculations for days, hours, minutes and seconds

            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);

            if (distance > 0) {
                // Display the result in the element with id="demo"
                document.getElementById("timer").innerHTML = minutes + "m " + seconds + "s ";
                console.log(minutes + "m " + seconds + "s ");
            }
            // If the count down is finished, write some text 
            if (distance == 0) {
                clearInterval(x);
                document.getElementById("timer").innerHTML = "payament done!"
                //document.getElementById("demo").innerHTML = "You are payed";
            }
        }
        var getpayed = new Interval(caluclate, 1000);

    </script>
    <% } %>

    <script>
        function chat(msg, sender) {
            var d = new Date();
            var t = d.getTime();
            var time = d.getHours() + ":" + d.getMinutes();
            var block = '<li id="item-msg-' + t + '" class="collection-item"><span class="title">' + msg + '</span>';

            block = block + '<span class="secondary-content second-chat-zone">' + time + '</span></li>';

            $("#chatbox").append(block);
            if (sender == "me") {
                $("#item-msg-" + t).addClass("container-chat-sender");
            } else {

                $("#item-msg-" + t).addClass("container-chat-receiver");

            }
            $("#chatbox").scrollTop($("#chatbox").height());

        }

        function FileChat(uid, name, progress, sender) {

            var block = '<li id="item-' + uid + '" class="collection-item"><span class="title" >' + name + '<span id="val">( ' + progress + ' % )</span></span>';
            block = block + '<div class="progress" >';
            block = block + '<div class="determinate" id="progress-' + uid + '" style="width: 0%"></div></div></li>';
            //block = block + '<span class="secondary-content second-chat-zone">' + time + '</span>';

            $("#chatbox").append(block);
            if (sender == "me") {
                $("#item-" + uid).addClass("container-chat-sender");
            } else {

                $("#item-" + uid).addClass("container-chat-receiver");

            }
            $("#chatbox").scrollTop($("#chatbox").height());

        }
        function send() {

            var text = $("#msg").val();
            console.log(text);
            if (text != '') {
                console.log(text);
                chat(text, "me");
                connection.send({ text: text });
                $("#msg").val("");
            }

        }

        function openfile(event) {
            //event.preventDefault();
            document.getElementById('file').click();
        }
        $('#file').change(function (e) {
            file = document.getElementById('file').files[0];
            connection.shareFile(file,otherid)
        });
    </script>

    <script>

        var begin = true;


        var otherid;
        var connection = new RTCMultiConnection();
        var predefinedRoomId = "<%= id %>";
        var socket;
        var type = "<%=type %>";
        var leave_channel = 'leave-room-' + predefinedRoomId;
        var begin_stream = 'begin-room-' + predefinedRoomId;
        // this line is VERY_important
        connection.socketURL = 'https://rtcmulticonnection.herokuapp.com:443/';
        // connection.socketURL = 'http://localhost:3000/';

        // all below lines are optional; however recommended.

        connection.session = {
            audio: true,
            video: true,
            data: true
        };

        connection.sdpConstraints.mandatory = {
            OfferToReceiveAudio: true,
            OfferToReceiveVideo: true
        };


        connection.connectSocket(function (socket) {
            connection.socket.on(connection.socketCustomEvent, function () {
                // stop all local cameras
                connection.attachStreams.forEach(function (localStream) {
                    localStream.stop();
                });

                // close socket.io connection
                connection.closeSocket();
            })

        });
        connection.filesContainer = document.getElementById("filecontainer");

        connection.setCustomSocketEvent(leave_channel);

        connection.onstream = function (event) {
            if (event.type === "local") {
                instances.open();
                document.getElementById("localVideo").appendChild(event.mediaElement);
            }
            if (event.type === "remote") {
                document.getElementById("remoteVideo").appendChild(event.mediaElement);
            }

        };

        connection.onmessage = function (event) {
            console.log("onmessage");
            var message = event.data;
            console.log(message.text);
            if (message.leave == "true") {
                console.log(message);
                instances.close();
                $("#stream-end").removeClass("hide");
                $("#stream_info").html(message.msg);
                $("#backtodash").addClass("hide");
                connection.closeSocket();
                clearInterval(x);
            }
            if (message.text != "") {
                console.log(message.text)
                chat(message.text, "other");
            }
            /*if (message.shareYourCameraWithMe) {
                connection.dontAttachStream = false;
                connection.renegotiate(event.userid); // share only with single user
            }

            if (message.shareYourCameraWithAllUsers) {
                connection.dontAttachStream = false;
                connection.renegotiate(); // share with all users
            }*/
        }
        connection.onUserStatusChanged = function (event) {
            console.log(event);
            if (connection.userid != event.userid) {
                if (begin) {
                    otherid = event.userid;
                }
            }
            if (event.status == "offline" && otherid == event.userid) {
                $("#videos").addClass("hide");
                $("#stream-end").removeClass("hide");
                $("#stream_info").html(message.msg);
                $("#backtodash").addClass("hide");
                if (type == "teacher") {

                    getpayed.stop();

                }
                if (type == "student") {
                    setpayed.stopTimeout();
                }
            }
            if (begin) {
                otherid = event.userid;
                if (type == "teacher") {
                    // Update the count down every 1 second
                    getpayed.start();
                }
                if (type == "student") {
                    setpayed.startTimeout();

                }
                begin = false;

            }
        };



        connection.checkPresence(predefinedRoomId, function (isRoomEists, roomid) {
            if (isRoomEists) {
                connection.join(roomid);
            } else {
                connection.open(roomid)
            }

        });

        connection.enableFileSharing = true;





        connection.onleave = function (event) {
            if (event.userid == otherid) {

                //console.log(message);
                /*$("#videos").addClass("hide");
                $("#stream-end").removeClass("hide");
                $("#stream_info").html(message.msg);
                $("#backtodash").addClass("hide");*/
            }

        };


        document.getElementById("backtodash").addEventListener('click', function (event) {
            event.preventDefault();
            if (type == "student") {
                lectureInstance.students(account, function (err, res) {
                    name = res[0] + " " + res[1];
                    console.log(name);
                    var msg = name + " has leave the course";
                    connection.send({ msg: msg, type: type, leave: "true" });
                    connection.socket.emit(connection.socketCustomEvent, { msg: msg, type: type, leave: "true" })
                    //window.location.href = "/<%=type %>/dashboard";
                    $("#backtodash").addClass("hide");
                });
            }


        })
    </script>
    <script src="../../js/fileshare.js"></script>

</body>

</html>